const arr1 = [
    "Acquia",
    "Acuity Knowledge Partners",
    "Ada",
    "ADP",
    "AffiniPay",
    "Affinity",
    "Alorica",
    "Alteryx",
    "Altruist",
    "AppFolio",
    "Apryse",
    "Ardoq",
    "Asana",
    "Aspect",
    "Assent",
    "Atera",
    "AuditBoard",
    "Avalara",
    "Avaloq",
    "Avolve Software",
    "Awardco",
    "B2Gnow",
    "Backbase",
    "Bamboo Health",
    "BambooHR",
    "Bannerflow",
    "Barracuda",
    "Basis Technologies",
    "Basware Corporation",
    "Bazaarvoice",
    "Beeline",
    "Bill",
    "BlackLine",
    "Blue Yonder",
    "Botify",
    "BSN Sports",
    "Businessolver",
    "Calabrio",
    "CallMiner",
    "Capacity",
    "Capchase",
    "Cengage",
    "Certinia(formerly FinancialForce)",
    "Check Point Software Technologies",
    "Christopherson Business Travel",
    "Chronus",
    "Cisco",
    "Clari",
    "Cloudbeds",
    "Cloudflare",
    "Code42",
    "Cohesity",
    "commercetools",
    "Community Brands",
    "Compliancy Group",
    "Confluent",
    "Conga",
    "ConnectWise",
    "Coupa Software",
    "Covetrus",
    "Crayon",
    "Cresta",
    "Culture Amp",
    "CyberArk",
    "DailyPay",
    "Data Axle",
    "Datacor",
    "Dataiku",
    "Deltek",
    "Deputy",
    "DFIN",
    "DHI Group",
    "DigiCert",
    "DISCO",
    "Docebo",
    "Doceree",
    "Docusign",
    "DroneDeploy",
    "Dropbox",
    "Duck Creek Technologies",
    "Elastic",
    "Elior",
    "eLuma Online Therapy",
    "Employ",
    "Enable",
    "Equifax",
    "Euna Solutions",
    "evaluagent",
    "Everbridge",
    "Everstage",
    "Excellus",
    "F5",
    "Five9",
    "FloQast",
    "FORTNA",
    "Foundant Technologies",
    "Foundever",
    "FourKites",
    "Frontify",
    "Fullstory",
    "G2",
    "Genesys",
    "GitHub",
    "GitLab",
    "Glenmede",
    "Glia",
    "GoCardless",
    "Gong",
    "Google",
    "Google Cloud Platform",
    "Google Cloud Security | Mandiant",
    "GoTo",
    "Gradient AI",
    "Graylog",
    "GreyOrange",
    "Guardsquare",
    "Guild",
    "HackerOne",
    "HCSS",
    "Headspace",
    "Hello Heart",
    "HiBob",
    "Hinge Health",
    "Hitachi Vantara",
    "HSI",
    "Huntress",
    "iBase - t",
    "iCIMS",
    "IFS",
    "iLobby",
    "impact.com",
    "Included Health",
    "Informatica",
    "Innovaccer",
    "Insperity",
    "Intentsify",
    "IQVIA",
    "Ironclad",
    "isolved",
    "Iterable",
    "Johnson Controls",
    "Kantata",
    "Kentik",
    "Khoros",
    "Klaviyo",
    "Kofax (Tungsten Automation)",
    "Korber Supply Chain",
    "Lansweeper",
    "LaunchDarkly",
    "League",
    "Level Access",
    "Lexia Learning Systems",
    "Lexitas Pharma Services",
    "Lloyd's List Intelligence",
    "LogicMonitor",
    "Macmillan Learning",
    "MasterControl",
    "Matillion",
    "Medrio",
    "Meevo",
    "Merge",
    "Messente",
    "Microsoft",
    "Mimecast",
    "Mitratech",
    "Morningstar",
    "Motus",
    "MX",
    "Nasdaq eVestment",
    "Ncontracts",
    "NetDocuments",
    "Nextracker",
    "NICE Actimize",
    "Nitrogen",
    "Norstella",
    "Northspyre",
    "Nuance Communications",
    "Nutanix",
    "Nylas",
    "OAG",
    "Ontotext",
    "OpenPayd",
    "OpenText",
    "Orca Security",
    "Own",
    "Palo Alto Networks",
    "Pattern",
    "Paychex",
    "Paycor",
    "Paylocity",
    "PCS Software",
    "PDQ.com",
    "Perceptyx",
    "PointClickCare",
    "Precisely",
    "Premier, Inc.",
    "PrimePay",
    "QA Wolf",
    "Qlik",
    "Quadient",
    "Quantum Metric",
    "Quickbase",
    "Quinyx",
    "Redis",
    "Reputation",
    "Ricoh Americas",
    "RingCentral",
    "Riskified",
    "Rubrik",
    "RxBenefits",
    "Sage",
    "SailPoint Technologies",
    "Salesloft",
    "Schoox",
    "Scorpion",
    "SEON Technologies",
    "Signifyd",
    "Sitecore",
    "Skyhigh Security",
    "SMART Technologies",
    "SmartBear",
    "Smartsheet",
    "Sodexo",
    "Sonar",
    "Spectrum",
    "Stibo Systems",
    "Storable",
    "Stripe",
    "Submittable",
    "Sumo Logic",
    "T - Mobile",
    "Tangoe",
    "Tanium",
    "Tecton",
    "Telesign",
    "Ten Thousand Coffees(10KC)",
    "Tenable",
    "The New York Times",
    "Tines",
    "Tipalti",
    "Toast",
    "Trella Health",
    "Twilio",
    "Ubiquity",
    "Uniphore",
    "Upwork",
    "Varicent Software",
    "Visier",
    "WaFd Bank",
    "Watermark Insights",
    "Waystar",
    "WekaIO",
    "Whistic",
    "Workato",
    "WorkBuzz",
    "Workiva",
    "Wowza",
    "Wrike",
    "Xactly",
    "YouGov",
    "Zelis",
    "Zendesk",
    "Zip",
    "Zoom",
    "Zuper"
]

const arr2 = [
    "Acquia",
    "Acuity Knowledge Partners",
    "Ada",
    "ADP",
    "AffiniPay",
    "Affinity",
    "Alorica",
    "Alteryx",
    "Altruist",
    "AppFolio",
    "Apryse",
    "Ardoq",
    "Asana",
    "Aspect",
    "Assent",
    "AuditBoard",
    "Avalara",
    "Avaloq",
    "Avolve Software",
    "Awardco",
    "B2Gnow",
    "Backbase",
    "Bamboo Health",
    "BambooHR",
    "Bannerflow",
    "Barracuda",
    "Basis Technologies",
    "Basware Corporation",
    "Bazaarvoice",
    "Beeline",
    "Bill",
    "BlackLine",
    "Blue Yonder",
    "Botify",
    "BSN Sports",
    "Businessolver",
    "Calabrio",
    "CallMiner",
    "Capacity",
    "Capchase",
    "Cengage",
    "Certinia (formerly FinancialForce)",
    "Check Point Software Technologies",
    "Christopherson Business Travel",
    "Chronus",
    "Cisco",
    "Clari",
    "Cloudbeds",
    "Cloudflare",
    "Code42",
    "Cohesity",
    "commercetools",
    "Community Brands",
    "Compliancy Group",
    "Confluent",
    "Conga",
    "ConnectWise",
    "Coupa Software",
    "Covetrus",
    "Crayon",
    "Cresta",
    "Culture Amp",
    "CyberArk",
    "DailyPay",
    "Data Axle",
    "Datacor",
    "Dataiku",
    "Deltek",
    "Deputy",
    "DFIN",
    "DHI Group",
    "DigiCert",
    "DISCO",
    "Docebo",
    "Doceree",
    "Docusign",
    "DroneDeploy",
    "Dropbox",
    "Duck Creek Technologies",
    "Elastic",
    "Elior",
    "eLuma Online Therapy",
    "Employ",
    "Enable",
    "Equifax",
    "Euna Solutions",
    "evaluagent",
    "Everbridge",
    "Everstage",
    "Excellus",
    "F5",
    "Five9",
    "FloQast",
    "FORTNA",
    "Foundant Technologies",
    "Foundever",
    "FourKites",
    "Frontify",
    "Fullstory",
    "G2",
    "Genesys",
    "GitHub",
    "GitLab",
    "Glenmede",
    "Glia",
    "GoCardless",
    "Gong",
    "Google",
    "Google Cloud Platform",
    "Google Cloud Security | Mandiant",
    "GoTo",
    "Gradient AI",
    "Graylog",
    "Guardsquare",
    "Guild",
    "HackerOne",
    "HCSS",
    "Hello Heart",
    "HiBob",
    "Hinge Health",
    "Hitachi Vantara",
    "HSI",
    "Huntress",
    "iBase-t",
    "iCIMS",
    "IFS",
    "iLobby",
    "impact.com",
    "Included Health",
    "Informatica",
    "Innovaccer",
    "Insperity",
    "Intentsify",
    "IQVIA",
    "Ironclad",
    "isolved",
    "Iterable",
    "Johnson Controls",
    "Kantata",
    "Kentik",
    "Khoros",
    "Klaviyo",
    "Kofax (Tungsten Automation)",
    "Korber Supply Chain",
    "Lansweeper",
    "LaunchDarkly",
    "League",
    "Level Access",
    "Lexia Learning Systems",
    "Lexitas Pharma Services",
    "Lloyd's List Intelligence",
    "LogicMonitor",
    "Macmillan Learning",
    "MasterControl",
    "Matillion",
    "Medrio",
    "Meevo",
    "Merge",
    "Messente",
    "Microsoft",
    "Mimecast",
    "Mitratech",
    "Morningstar",
    "Motus",
    "MX",
    "Nasdaq eVestment",
    "Ncontracts",
    "NetDocuments",
    "Nextracker",
    "NICE Actimize",
    "Nitrogen",
    "Norstella",
    "Northspyre",
    "Nuance Communications",
    "Nutanix",
    "OAG",
    "Ontotext",
    "OpenPayd",
    "OpenText",
    "Orca Security",
    "Own",
    "Palo Alto Networks",
    "Pattern",
    "Paychex",
    "Paycor",
    "Paylocity",
    "PCS Software",
    "PDQ.com",
    "Perceptyx",
    "PointClickCare",
    "Precisely",
    "Premier, Inc.",
    "PrimePay",
    "QA Wolf",
    "Qlik",
    "Quadient",
    "Quantum Metric",
    "Quickbase",
    "Quinyx",
    "Redis",
    "Reputation",
    "Ricoh Americas",
    "RingCentral",
    "Riskified",
    "Rubrik",
    "RxBenefits",
    "Sage",
    "SailPoint Technologies",
    "Salesloft",
    "Schoox",
    "Science Interactive",
    "Scorpion",
    "SEON Technologies",
    "Signifyd",
    "Sitecore",
    "Skyhigh Security",
    "SmartBear",
    "Smartsheet",
    "SMART Technologies",
    "Sodexo",
    "Sonar",
    "Spectrum",
    "Stibo Systems",
    "Storable",
    "Stripe",
    "Submittable",
    "Sumo Logic",
    "Tangoe",
    "Tanium",
    "Tecton",
    "Telesign",
    "Tenable",
    "Ten Thousand Coffees (10KC)",
    "The New York Times",
    "Tines",
    "Tipalti",
    "T-Mobile",
    "Toast",
    "Trella Health",
    "Twilio",
    "Ubiquity",
    "Uniphore",
    "Upwork",
    "Varicent Software",
    "Visier",
    "WaFd Bank",
    "Watermark Insights",
    "Waystar",
    "WekaIO",
    "Whistic",
    "Workato",
    "WorkBuzz",
    "Workiva",
    "Wowza",
    "Wrike",
    "Xactly",
    "YouGov",
    "Zelis",
    "Zendesk",
    "Zoom",
    "Zuper"
]

// ### SOLUTION #1 - NESTED LOOP - BRUTE FORCE O(n²) ###", "/**", " * Finds elements in arr1 that are missing from arr2 using a nested loop.", " * 
//     * Approach:
//  * - Loop through each item in `arr1`
//     * - Check if it exists in `arr2` using an inner loop
//  * - If found, stop checking further(break the inner loop)
//  * - If not found, add it to`missingItems`
//     * 
//  * Time Complexity: O(n²)(Quadratic)
//     * - Each item in `arr1` is compared against every item in `arr2`
//         * - Slow for large datasets
//             * 
//  * Space Complexity: O(m)(Linear)
//         * - Stores missing elements in `missingItems`
//             * 
//  * Pros:
//  * - Simple to understand
//     * - Works without additional data structures
//         * 
//  * Cons:
//  * - Inefficient for large arrays due to nested loops(O(n²) complexity)
//     * - Slower compared to solutions using Sets - *


function findMissingItems(arr1, arr2) {
    let missingItems = [];

    for (let i = 0; i < arr1.length; i++) {
        let found = false;

        for (let j = 0; j < arr2.length; j++) {
            if (arr1[i] === arr2[j]) {
                console.log(`${i} and ${j} are the same`);
                found = true;
                break;
            }
        }

        if (!found) {
            missingItems.push(arr1[i]);
        }
    }
    return missingItems;
}
console.log(findMissingItems(arr1, arr2));


// ### SOLUTION 2: USING .filter() WITH .includes() (O(n²)) ###
/**
 * Uses `filter()` to find items in `main_array` that do not exist in `del_array`.
 * 
 * Approach:
 * - Loop through `main_array` using `.filter()`
 * - For each item, check if it exists in `del_array` using `.includes()`
 * - If not found, keep the item in the result
 * 
 * Time Complexity: O(n²) (Quadratic)
 * - `.includes()` performs an O(n) search for each element, making it O(n²)
 * 
 * Space Complexity: O(m) (Linear)
 * - Stores missing elements in a new array
 * 
 * Pros:
 * - More concise and readable than a nested loop
 * - Avoids explicit loops
 * 
 * Cons:
 * - Still inefficient (O(n²)) due to repeated `.includes()` calls
 * - Slower for large datasets
 */
function getArraySetDifference(main_array, del_array) {
    return main_array.filter((item) => !del_array.includes(item));
}
console.log(getArraySetDifference(arr1, arr2));


// ### SOLUTION 3 - USING SETS FOR O(n) PERFORMANCE ###
/**
 * Uses Sets for fast lookup and finds items in `arr1` that are missing from `arr2`.
 * 
 * Approach:
 * - Convert `arr2` into a Set (O(n) preprocessing time)
 * - Loop through `arr1`, checking if each item exists in the Set (O(1) lookup)
 * - If not found, store it in `missingItems`
 * 
 * Time Complexity: O(n) (Linear)
 * - Creating the Set is O(n)
 * - Looping through `arr1` is O(n)
 * - Total: O(n) + O(n) = O(n)
 * 
 * Space Complexity: O(n) (Linear)
 * - Extra space used for the Set
 * - Additional space used for `missingItems`
 * 
 * Pros:
 * - Much faster than O(n²) solutions
 * - Uses efficient O(1) lookup instead of `.includes()`
 * 
 * Cons:
 * - Uses extra memory (Set structure)
 */
function findMissingItemsWithSet(arr1, arr2) {
    let arr2Set = new Set(arr2); // Convert arr2 to a Set for fast lookup
    return arr1.filter(item => !arr2Set.has(item)); // O(n) filtering
}
console.log(findMissingItemsWithSet(arr1, arr2));
